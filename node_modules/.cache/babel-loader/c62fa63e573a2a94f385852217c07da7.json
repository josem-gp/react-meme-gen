{"ast":null,"code":"var _jsxFileName = \"/Users/josemanuelgarciaportillo/code/josem-gp/react-meme-gen/src/components/Meme.js\",\n    _s = $RefreshSig$();\n\nimport memesData from \"../memesData.js\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Meme() {\n  _s();\n\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\"\n  });\n  const [allMemeImages, setAllMemeImages] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemeImages.length);\n    const url = allMemeImages[randomNumber].url;\n    setMeme(prevMeme => ({ ...prevMeme,\n      randomImage: url\n    }));\n  }\n\n  function handleMemeText(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setMeme(prevMeme => ({ ...prevMeme,\n      [name]: value\n    }));\n  }\n\n  console.log(allMemeImages);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(result => {\n      if (!result.ok) {\n        throw Error(\"Error found! Couldn't connect\");\n      }\n\n      return result.json();\n    }).then(data => {\n      console.log(data);\n      setAllMemeImages(data.memes);\n    }).catch(err => {\n      setError(err.message);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Top text\",\n          name: \"topText\",\n          value: meme.topText,\n          onChange: handleMemeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Bottom text\",\n          name: \"bottomText\",\n          value: meme.bottomText,\n          onChange: handleMemeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: getMemeImage,\n        children: \"Get a new meme image \\uD83D\\uDDBC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"meme\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: meme.randomImage,\n          alt: \"random-mem\",\n          className: \"meme-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text top\",\n          children: meme.topText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"meme--text bottom\",\n          children: meme.bottomText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Meme, \"r3Lbm3ydrFsItow5GOT9PfEx1iA=\");\n\n_c = Meme;\nexport default Meme;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meme\");","map":{"version":3,"names":["memesData","useState","useEffect","Meme","meme","setMeme","topText","bottomText","randomImage","allMemeImages","setAllMemeImages","error","setError","getMemeImage","randomNumber","Math","floor","random","length","url","prevMeme","handleMemeText","event","name","value","target","console","log","fetch","then","result","ok","Error","json","data","memes","catch","err","message"],"sources":["/Users/josemanuelgarciaportillo/code/josem-gp/react-meme-gen/src/components/Meme.js"],"sourcesContent":["import memesData from \"../memesData.js\";\nimport { useState, useEffect } from \"react\";\n\nfunction Meme() {\n  const [meme, setMeme] = useState({\n    topText: \"\",\n    bottomText: \"\",\n    randomImage: \"http://i.imgflip.com/1bij.jpg\",\n  });\n  const [allMemeImages, setAllMemeImages] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  function getMemeImage() {\n    const randomNumber = Math.floor(Math.random() * allMemeImages.length);\n    const url = allMemeImages[randomNumber].url;\n    setMeme((prevMeme) => ({\n      ...prevMeme,\n      randomImage: url,\n    }));\n  }\n\n  function handleMemeText(event) {\n    const { name, value } = event.target;\n    setMeme((prevMeme) => ({\n      ...prevMeme,\n      [name]: value,\n    }));\n  }\n\n  console.log(allMemeImages);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((result) => {\n        if (!result.ok) {\n          throw Error(\"Error found! Couldn't connect\");\n        }\n        return result.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setAllMemeImages(data.memes);\n      })\n      .catch((err) => {\n        setError(err.message);\n      });\n  }, []);\n\n  return (\n    <div className=\"input\">\n      <div>\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Top text\"\n            name=\"topText\"\n            value={meme.topText}\n            onChange={handleMemeText}\n          ></input>\n          <input\n            type=\"text\"\n            placeholder=\"Bottom text\"\n            name=\"bottomText\"\n            value={meme.bottomText}\n            onChange={handleMemeText}\n          ></input>\n        </div>\n        <button className=\"button\" onClick={getMemeImage}>\n          Get a new meme image ðŸ–¼\n        </button>\n        <div className=\"meme\">\n          <img src={meme.randomImage} alt=\"random-mem\" className=\"meme-image\" />\n          <h2 className=\"meme--text top\">{meme.topText}</h2>\n          <h2 className=\"meme--text bottom\">{meme.bottomText}</h2>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Meme;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}